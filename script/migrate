#!/usr/bin/env perl

use strict;
use warnings;
use v5.10;

use FindBin;
use GitDDL::Migrator;
package BBS::Migrator {
    use v5.10;

    use DBI;
    use FindBin;
    use Try::Tiny;
    use Term::UI;
    use Term::ReadLine;
    use SQL::Translator;
    use SQL::Translator::Diff;

    use Mouse;

    has sql => (is => 'ro', required => 1);
    has sql_file => (is => 'ro', required => 1);
    
    has conf => (
        is => 'ro',
        default => sub { do "$FindBin::Bin/../etc/bbs.conf" or die $! }
    );

    has dsn => (
        is      => 'ro',
        lazy    => 1,
        default => sub {
            my $self = shift;
            my $database = $self->conf->{database};
            my $dbname   = $database->{name};
            my $username = $database->{username};
            my $password = $database->{password};
            return +["dbi:Pg:dbname=$dbname", $username, $password, +{ RaiseError => 1 }];
        }
    );

    sub _diff {
        my $self = shift;
        my $src = do {
            my $dbh = DBI->connect(@{ $self->dsn });
            SQL::Translator->new(
                parser      => 'DBI',
                parser_args => +{ dbh => $dbh },
            )->translate;
        };

        my $target = do {
            SQL::Translator->new(
                parser   => $self->sql,
                filename => "$FindBin::Bin/../" . $self->sql_file,
            )->translate;
        };

        my $std = SQL::Translator::Diff->new(+{
            output_db     => $self->sql,
            source_schema => $src,
            target_schema => $target,
        });

        $std->compute_differences->produce_diff_sql;
    }

    sub migrate {
        my $self = shift;
        my $term = Term::ReadLine->new('Migration');

        my $yes = $term->ask_yn(
            prompt => 'Do you want to migrate?',
            default => 'y'
        );

        if ($yes) {
            my $created = 0; # flag

            # Check and create database
            my $dbh = try {
                DBI->connect(@{ $self->dsn });
            } catch {
                # If does not exist your specified database,
                # create and this will return connected session.
                my $database = $self->conf->{database}->{name};
                my $username = $self->conf->{database}->{username};
                my $_dbh = DBI->connect('dbi:Pg:dbname=postgres', '', '', +{ RaiseError => 1 }) or die $!;
                if ($username) {
                    $_dbh->do("create database \"$database\" with owner $username") or die $!;
                } else {
                    $_dbh->do("create database \"$database\"") or die $!;
                }
                $_dbh->disconnect;

                # Retry connect to your specified database.
                ( return DBI->connect(@{ $self->dsn }) ) or die $!;
            };

            # Migrate
            my @drops = ();
            for my $statement (split /\n/, $self->_diff) {
#                if ($statement =~ /\ADROP.*\z/) {
#                   push @drops, $&;
#                } else {
                    say $statement;
#                }
            }

            for my $drop (@drops) {
                say $drop;
            }
            $dbh->disconnect;

            say "Completed";
        }
    }

    __PACKAGE__->meta->make_immutable;
};

BEGIN { unshift @INC, "$FindBin::Bin/../lib" }
use BBS::Model::Schema;

main(); # Execute

sub main {
    my $base_dir = "$FindBin::Bin/..";
    my $sql_path = "etc/sql";
    unless (is_exist("${base_dir}/${sql_path}")) {
        mkdir $sql_path;
    }

    my $sql_file = "$base_dir/$sql_path/schema_ddl.sql";
    say "Create schema file: $sql_file";
    create_schema($sql_file);

    my $migrator = BBS::Migrator->new(sql => 'PostgreSQL', sql_file => "${sql_path}/schema_ddl.sql");
    $migrator->migrate;
}

sub is_exist { -d $_[0] }

sub create_schema {
    my $file = shift;
    open my $fh, ">",  $file;
    print $fh BBS::Model::Schema->output;
    close $fh;
}